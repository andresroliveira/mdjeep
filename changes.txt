
MDjeep version 0.3.*

Changes
-------

Version 0.3.2 vs 0.3.1

1. The main novelty in this version is given by the strategy for generating and updating the boxes used in the 
   coarse-grained representation used in the BP algorithm to deal with instances containing interval distances. First 
   of all, in the versions 0.3.x (with x < 2), the arcs used to define the boxes for the current vertex v are computed 
   by using only one possible position for every reference vertex u. As a consequence, when the box is computed (in a 
   way to entirely contain the arc), it cannot be guaranteed that it actually covers the entire portion of space for 
   the vertex v where all reference vertices are satisfied. If another position for some of the reference vertices u 
   is considered, then a "similar" arc can be computed, which however doesn't "stand" in the same position in space: 
   it actually "moves" wrt the first computed arc.

   For this reason, the bound expanding technique (already implemented in a primitive version since MDjeep 0.3.0) is 
   applied to every initially computed box as soon as they are created. The initial box is related to the arc where the
   current positions of the reference vertices u are considered, and where the middle distance of the only reference 
   interval distance is selected. The expansion of a box is stopped only when the newly added positions in the box are 
   not feasible with all reference distances. With this bound expanding technique, the boxes are able to cover a larger 
   portion of the space, where the selected positions are freely to move during the refinement step of the BP algorithm. 
   Of course, the box is only a rough approximation of the true portion of space where the positions for a vertex are 
   feasible. For this reason, every time SPG is invoked to perform the refinement step, and the vertex positions are 
   "moved" inside the boxes to reduce the overall error on the distances, all involved boxes are subsequently 
   recentered, so that this rough approximation provided by the boxes is more accurate around the currently selected 
   vertex position.

   The box centering technique basically consists in creating a new box centered in the new selected vertex position and 
   having the same size of the previous box over the 3 dimensions, and by intersecting it with this previous box. Then, 
   the bound expanding technique is applied again to the result of the intersection to enlarge it as far as all reference 
   distances can be satisfied.

2. The DDF and BoxDDF functions have been revised so that they can output the current partial error. As a consequence, 
   the verification of the constraints in the BP algorithm is now performed after invoking such functions (the 
   verification is not performed anymore directly by these two functions). This modification allowed to implement a new 
   version of bp_exact where all possible triplets of discretization vertices may be tested and the one leading to the 
   least error propagation is chosen. When the consecutivity assumption is satisfied, bp_exact initially chooses the 3 
   immediate preceding vertices: in this case, the verification of other triplets is performed only when it is detected 
   that the triplet of immediate preceding vertices forms a flat angle.

3. In bp_exact, the verification on the value of the omega cosine (which can reveal that the angle is actually flat and 
   therefore it is not necessary to branch at this layer of the search tree) is replaced by a new implementation which 
   is mostly based on the symmetries of the search tree. Up to now, the symmetry theory has been fully developed only 
   for DDGP instances satisfying the consecutivity assumption (we say that these instances belong to the DMDGP class). 
   Given a vertex v, and for a given selection of its reference vertices u, two new branches rooted at v can be defined: 
   we know that both branches can contain a valid realization only if the vertex v is "symmetric". Therefore, if during 
   the exploration in bp_exact, a valid realization was already found by exploring the first branch rooted at v, then it 
   is not necessary to explore the second branch, unless it is symmetric (the verification of the symmetries is performed 
   in the main by invoking the function findSymmetries). However, for the vertices that are symmetric, and for the 
   instances which do not satisfy the consecutivity assumption, this theoretical result cannot be exploited. In the 
   current version of MDjeep, we use the cosine of omega only in these last situations, and we prune the second branch 
   of the vertex v only if the cosine value is smaller than a predefined value (0.05) and if the exploration of the first 
   branch had not led to the construction of any valid realizations.

4. The MDjeep file (MDfile, with extension mdf) is introduced in MDjeep 0.3.2, which allows to provide, in one unique 
   file, the specifications necessary to load a DDGP instance, and to select a method to solve it, with all its 
   attributes. Apart from the instance name (that is subsequently used by MDjeep to make reference to the instance), 
   the text file containing the distance list defining the instance can be specified in the MDfile, together with the 
   format for every line of this distance list. This format specification allows to identify in the distance list the 
   several necessary elements, such as the vertex identifiers, the lower and upper bounds for the distances, and others.
   See the README file for more information about MDfiles.

5. Together with the new parser, several verifications on the input files (both MDfiles and distance lists) have been 
   implemented. For the MDfiles, the precise syntax described in the README file needs to be respected. For the text 
   file containing the distance lists (whose name can be specified in the MDfile), MDjeep verifies first of all that 
   every line of the text files contains a list of elements of the same type (distinguishing among integer, real, and 
   alphanumeric elements). It is subsequently verified that the type list in every line of the file is compatible with 
   the format specified in the MDfile (for example, a string of alphabet characters cannot be considered as a valid 
   lower bound for the distances). It is also verified that there are no different lines in the text file making 
   reference to the same pair of vertices (this would imply that we have two different distances for the same pair of 
   vertices). Before invoking the BP method, it is verified whether the discretization assumptions are satisfied 
   (prerequisite for BP). To this aim, MDjeep verifies (in the following order) whether: there are enough distances to 
   perform the discretization, there are enough exact distances, the first 3 vertices form a clique of exact distances, 
   the DDGP assumptions are satisfied, there exists at least one triplet of vertices for every vertex that forms a 
   non-flat angle, and (finally, only if it is detected that all distances are exact and precise) it is verified whether
   the consecutivity assumption is satisfied.

6. With the idea to implement in the future other distance geometry methods inside MDjeep (as a main method or as a
   refinement method), it is now possible to launch with MDjeep the execution of the spectral projected gradient method
   (SPG), already implemented since MDjeep 0.3.0 but used then only as a refinement method. The selected solution method
   can be specified in the MDfile, together with its list of attributes (many attributes have their own default values,
   which will be used in case they won't be specified). The attributes startpoint (name of the file containing the
   starting point) and maxit (maximum number of iterations) are mandatory when using SPG as a main method.

7. A new option (which can be specified through MDjeep input arguments) has been added, which allows to specify the
   maximum number of solutions that the selected method should find (it currently applies only to BP, as SPG can only
   provide one solution). This option comes as an alternative to option -1, where the number of solutions is limited 
   to 1; with the new option -l, the number of solution can be limited to any specified value. The default maximum 
   number of solutions is set to 10 in MDjeep 0.3.2.

8. The options -e, -r and -v are now obsolete. The values of the tolerance eps (option -e) and the resolution parameter
   (option -r) can now be set up directly in the MDfile (which is read by MDjeep before verifying the other command line
   options). As for the option -v, the previous file formats used in MDjeep versions 0.1 and 0.2 can now be explicitly
   specified in the MDfile (the format is: Id1 Id2 lb ub Name1 Name2 groupName1 groupName2).

Version 0.3.1 vs 0.3.0

1. Two bugs were detected in the version 0.3.0 (see bug report). The method implemented for the computation of the
   boxes was giving wrong results in some particular situations: MDjeep 0.3.1 implements now a more reliable method 
   for the computation the bound boxes. The second bug was related to the bound expansion feature of SPG, where the 
   generation of solutions not strictly contained in the box bounds was possible. This mechanism is reimplemented 
   in MDjeep 0.3.1 to avoid this issue.

2. The verification of the discretization assumptions is now performed by using external functions (functions of C 
   file "vertex"), the functions are initialClique, isDDGP and isDMDGP. For MDjeep 0.3.1 to solve the input instance, 
   it is necessary that the function isDDGP gives a positive answer; if the result of isDMDGP is negative, MDjeep can 
   still solve the instance (this verification is in fact now optional, and performed automatically only when the 
   instance is composed only by exact distances).

3. The verification of the existence of the symmetric vertices is also now performed by an external function of the 
   "vertex" C file (function findSymmetries). The new implemented method has a lower complexity wrt the method 
   implemented directly in the main of version 0.3.0 (old complexity: |V|^3, new worst-case complexity: |V|*|E|, 
   where V is the instance vertex set, and E is its edge set).

4. The computation of the reference vertices to be used in the BP algorithm is performed only once, and the triplets 
   of reference vertices are kept in memory for the several recursive calls to BP. When more than one reference triplet 
   can be selected, the "optimal" one is searched (basically, when all distances are exact, we avoid to select triplets 
   leading to the definition of angles close to a multiple of pi; whereas if one distance is an interval, we simply take
   the triplet with two exact distances and the interval with the smallest range).

5. The resolution parameter is now disabled when stepping from a symmetric side to the other of the search tree (when 
   the option "-sym" is not used). In this way, solutions obtained from both symmetric parts of the search tree will be 
   contained in the solution set.

6. A new pruning device, named BoxDDF, is integrated in MDjeep 0.3.1 in order to compute the distances between pairs of 
   boxes "enveloping" pairs of vertices with known distance: if the available distance cannot be satisfied by the two 
   boxes, then it is not necessary to call SPG in the attempt to refine the current solution (because the infeasibility 
   cannot be removed as far as the vertex positions are contained in their corresponding boxes). This improvement was 
   suggested by Douglas S. Goncalves.

7. In order to avoid lowering the performances (wrt the performances that MDjeep 0.2 is able to give) when dealing with 
   instances consisting of only exact distances, MDjeep 0.3.1 follows two separated paths for the solution of instances 
   containing or not interval distances. To this aim, the function bp_exact was included, which is strongly inspired by 
   the version of bp given in MDjeep 0.2. Among the other differences in dealing with instances containing interval 
   distances or not, we point out that the resolution parameter is now disabled when the instance at hand only contains 
   exact distances.

8. New auxiliary functions were included in the C files "distance" and "utils".

